{% import "_message.html.twig" as message %}

<!-- Responsive chat container -->
<div class="w-full max-w-4xl mx-auto">
    <!-- Unified Header for all screen sizes -->
    <div class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-t-lg p-6 border-b border-gray-100">
        <div class="flex items-center gap-4">
            <img id="robot-image" src="/robot.png" alt="Robot Golla" class="w-16 h-16 md:w-20 md:h-20 object-contain rounded-full bg-white p-2 shadow-sm">
            <div class="flex-1">
                <h2 class="text-xl md:text-2xl font-bold text-gray-900">Never Code Alone AI Assistant</h2>
                <p class="text-sm md:text-base text-gray-600">Dein YouTube-Wissensbegleiter fÃ¼r PHP, Symfony & mehr</p>
            </div>
        </div>
    </div>

    <!-- Chat container -->
    <div class="bg-white rounded-b-lg shadow-lg">
        <!-- Chat messages area -->
        <div id="chat-body" class="p-4 md:p-6 bg-white">
                {% if messages is defined %}
                    {% for message in messages %}
                        {% include '_message.html.twig' with { message, latest: loop.last } %}
                    {% endfor %}
                {% else %}
                    <div id="welcome" class="flex items-start gap-3 mb-4">
                        <img src="/robot.png" alt="Robot Golla" class="w-10 h-10 object-contain rounded-full bg-blue-100 p-1 flex-shrink-0">
                        <div class="flex-1 bg-gray-50 rounded-lg p-4 max-w-2xl">
                            <h4 class="text-lg font-semibold text-gray-800 mb-2">Hallo Freunde des Software-Entertainments!</h4>
                            <p class="text-gray-600 leading-relaxed">
                                Ich bin Robot Golla, euer AI-Assistent fÃ¼r alle Fragen rund um die YouTube-Videos von <strong>Never Code Alone</strong>.
                            </p>
                            <div class="mt-3 space-y-2 text-sm text-gray-600">
                                <p>ðŸ’¡ <strong>Was ich kann:</strong></p>
                                <ul class="ml-6 space-y-1">
                                    <li>â€¢ Fragen zu PHP, Symfony, Laravel beantworten</li>
                                    <li>â€¢ Coding-Tutorials und Best Practices erklÃ¤ren</li>
                                    <li>â€¢ Inhalte aus den YouTube-Videos finden</li>
                                </ul>
                            </div>
                            <p class="mt-3 text-sm text-gray-500">Stelle einfach deine Frage! ðŸ‘‡</p>
                        </div>
                    </div>
                {% endif %}
                <div id="loading-message" class="hidden"></div>
        </div>

        <!-- Input area -->
        <div class="border-t border-gray-200 bg-gray-50 p-4">
            <div class="flex gap-2">
                <input id="chat-message" type="text" class="flex-1 px-4 py-3 bg-white border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-all" placeholder="Stelle deine Frage hier...">
                <button id="chat-submit" class="px-4 md:px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all font-medium" type="button">Senden</button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Get elements (unified for all screen sizes)
    const chatInput = document.getElementById('chat-message');
    const chatSubmit = document.getElementById('chat-submit');
    const chatBody = document.getElementById('chat-body');
    const loadingMessage = document.getElementById('loading-message');
    const robotImage = document.getElementById('robot-image');

    function formatMarkdown(text) {
        // Convert markdown to HTML with proper list handling
        let html = text;

        // Store processed lists to avoid double-wrapping
        const processedLists = [];

        // First pass: Process headers
        html = html.replace(/^### (.*?)$/gm, '<h3 class="font-bold text-lg mt-3 mb-2 text-gray-800">$1</h3>');
        html = html.replace(/^## (.*?)$/gm, '<h2 class="font-bold text-xl mt-4 mb-2 text-gray-800">$1</h2>');
        html = html.replace(/^# (.*?)$/gm, '<h1 class="font-bold text-2xl mt-4 mb-3 text-gray-800">$1</h1>');

        // Handle incomplete markdown links FIRST (before processing complete ones)
        // Match [text](incomplete-url) patterns
        html = html.replace(/\[([^\]]+)\]\((https?:\/\/[^)]*$)/gm, '$1');
        html = html.replace(/\[([^\]]+)\]\((https?:\/\/$)/gm, '$1');
        html = html.replace(/\[([^\]]+)\]\(([^)]*$)/gm, '$1');

        // Process complete links with special handling for YouTube videos
        html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/g, function(match, text, url) {
            // Skip incomplete URLs
            if (!url || url === 'https://' || url === 'http://' || url.endsWith('://')) {
                return text; // Return just the text without link
            }
            if (url.includes('youtube.com') || url.includes('youtu.be')) {
                return '<a href="' + url + '" target="_blank" class="inline-flex items-center gap-1 text-blue-600 hover:text-blue-800 underline font-medium">ðŸ“º ' + text + '</a>';
            }
            return '<a href="' + url + '" target="_blank" class="text-blue-600 hover:text-blue-800 underline">' + text + '</a>';
        });

        // Bold text (must come before italic to avoid conflicts)
        html = html.replace(/\*\*(.*?)\*\*/g, '<strong class="font-semibold text-gray-900">$1</strong>');

        // Italic text - only match if it has content and proper closing
        html = html.replace(/\*([^*\n]+)\*/g, '<em class="italic">$1</em>');

        // Code blocks
        html = html.replace(/```(.*?)```/gs, '<pre class="bg-gray-100 rounded p-3 my-2 overflow-x-auto"><code>$1</code></pre>');
        html = html.replace(/`([^`]+)`/g, '<code class="bg-gray-100 px-1 py-0.5 rounded text-sm">$1</code>');

        // Split into lines for better list processing
        const lines = html.split('\n');
        const processedLines = [];
        let currentListItems = [];
        let listType = null; // 'ordered' or 'unordered'

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const orderedMatch = line.match(/^(\d+)\.\s+(.*)$/);
            const unorderedMatch = line.match(/^[-*]\s+(.*)$/);
            const indentedLine = line.match(/^\s{2,}[-*]\s+(.*)$/); // Indented sub-items

            if (orderedMatch) {
                // Start or continue ordered list
                // Only close if switching from unordered to ordered
                if (currentListItems.length > 0 && listType === 'unordered') {
                    processedLines.push(`<ul class="list-disc list-inside space-y-3 my-4">${currentListItems.join('')}</ul>`);
                    currentListItems = [];
                }

                // Continue or start collecting list item content
                listType = 'ordered';
                let itemContent = orderedMatch[2];

                // Look ahead for indented description lines
                let j = i + 1;
                const descriptionLines = [];
                while (j < lines.length) {
                    const nextLine = lines[j];
                    // Check if it's an indented line (description)
                    if (nextLine.match(/^\s{2,}/) && !nextLine.match(/^\s*\d+\./)) {
                        descriptionLines.push(nextLine.trim());
                        j++;
                    } else if (nextLine.trim() === '') {
                        // Empty line might be part of the item
                        j++;
                        if (j < lines.length && lines[j].match(/^\s{2,}/)) {
                            continue; // Continue if next line is indented
                        } else {
                            break; // Stop if not followed by indented content
                        }
                    } else {
                        break;
                    }
                }

                // Add description lines to item content
                if (descriptionLines.length > 0) {
                    itemContent += '<div class="mt-2 ml-4 text-sm text-gray-600">' + descriptionLines.join('<br>') + '</div>';
                    i = j - 1; // Skip processed lines
                }

                currentListItems.push('<li class="mb-2">' + itemContent + '</li>');
            } else if (unorderedMatch && !indentedLine) {
                // Start or continue unordered list
                // Only close if switching from ordered to unordered
                if (currentListItems.length > 0 && listType === 'ordered') {
                    processedLines.push(`<ol class="list-decimal list-inside space-y-3 my-4">${currentListItems.join('')}</ol>`);
                    currentListItems = [];
                }

                listType = 'unordered';
                currentListItems.push('<li>' + unorderedMatch[1] + '</li>');
            } else if (indentedLine) {
                // Handle indented sub-items as part of current list item
                if (currentListItems.length > 0) {
                    // Add to the last list item as a sub-point
                    const lastIndex = currentListItems.length - 1;
                    currentListItems[lastIndex] = currentListItems[lastIndex].replace('</li>', '<br><span class="ml-4 text-sm">â€¢ ' + indentedLine[1] + '</span></li>');
                }
            } else {
                // Not a list item - output any pending list first
                if (currentListItems.length > 0 && listType) {
                    const tag = listType === 'ordered' ? 'ol' : 'ul';
                    const listClass = listType === 'ordered' ? 'list-decimal' : 'list-disc';
                    processedLines.push(`<${tag} class="${listClass} list-inside space-y-3 my-4">${currentListItems.join('')}</${tag}>`);
                    currentListItems = [];
                    listType = null;
                }

                // Add non-list content
                if (line.trim()) {
                    processedLines.push(line);
                } else if (i > 0 && i < lines.length - 1) {
                    processedLines.push('');
                }
            }
        }

        // Close any remaining list
        if (currentListItems.length > 0 && listType) {
            const tag = listType === 'ordered' ? 'ol' : 'ul';
            const listClass = listType === 'ordered' ? 'list-decimal' : 'list-disc';
            processedLines.push(`<${tag} class="${listClass} list-inside space-y-3 my-4">${currentListItems.join('')}</${tag}>`);
        }

        // Join processed lines
        html = processedLines.join('\n');

        // Convert remaining line breaks to <br> for paragraphs
        html = html.replace(/\n\n+/g, '</p><p class="mb-3">');
        html = html.replace(/\n/g, '<br>');

        // Wrap in paragraph tags if not already wrapped
        if (!html.startsWith('<') || html.startsWith('<br>')) {
            html = '<p class="mb-3">' + html + '</p>';
        }

        // Clean up empty paragraphs and fix incomplete tags
        html = html.replace(/<p class="mb-3"><\/p>/g, '');
        html = html.replace(/<p class="mb-3"><br><\/p>/g, '');
        html = html.replace(/<p><\/p>/g, '');

        // Remove any unclosed paragraph tags at the end
        if (html.endsWith('<p>') || html.endsWith('<p class="mb-3">')) {
            html = html.substring(0, html.lastIndexOf('<p'));
        }

        return html;
    }

    function sendMessage() {
        const message = chatInput.value.trim();
        if (!message) return;

        // Remove welcome message if it exists
        const welcome = document.getElementById('welcome');
        if (welcome) {
            welcome.remove();
        }

        // Add user message
        const userMessageDiv = document.createElement('div');
        userMessageDiv.className = 'flex justify-end gap-3 mb-4';
        userMessageDiv.innerHTML = `
            <div class="max-w-xs md:max-w-md">
                <div class="bg-blue-600 text-white px-4 py-3 rounded-lg">
                    ${message}
                </div>
            </div>
            <div class="flex-shrink-0 w-10 h-10 rounded-full bg-gray-100 flex items-center justify-center">
                ðŸ‘¤
            </div>
        `;
        chatBody.appendChild(userMessageDiv);

        // Create loading message and append to chat body
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'flex items-start gap-3 mb-4';
        loadingDiv.id = 'current-loading';
        loadingDiv.innerHTML = `
            <img src="/robot.png" alt="Robot Golla" class="w-10 h-10 object-contain rounded-full bg-blue-100 p-1 flex-shrink-0">
            <div class="bg-gray-50 rounded-lg p-4">
                <div class="flex items-center gap-2">
                    <div class="animate-pulse flex gap-1">
                        <div class="w-2 h-2 bg-gray-400 rounded-full"></div>
                        <div class="w-2 h-2 bg-gray-400 rounded-full animation-delay-200"></div>
                        <div class="w-2 h-2 bg-gray-400 rounded-full animation-delay-400"></div>
                    </div>
                    <span class="text-gray-500 text-sm">Robot Golla denkt nach...</span>
                </div>
            </div>
        `;
        chatBody.appendChild(loadingDiv);
        chatInput.value = '';
        
        // Scroll to the new message
        const messages = chatBody.querySelectorAll('.flex');
        const lastMessage = messages[messages.length - 1];
        if (lastMessage) {
            lastMessage.scrollIntoView({ behavior: 'smooth', block: 'end' });
        }

        // Call real AI endpoint
        fetch('/api/chat/submit', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ message: message })
        })
        .then(response => response.json())
        .then(data => {
            // Find and replace the current loading message
            const currentLoading = document.getElementById('current-loading');
            if (currentLoading && data.success) {
                currentLoading.innerHTML = `
                    <img src="/robot.png" alt="Robot Golla" class="w-10 h-10 object-contain rounded-full bg-blue-100 p-1 flex-shrink-0">
                    <div class="flex-1 bg-gray-50 rounded-lg p-4 max-w-2xl">
                        <div class="text-gray-700 leading-relaxed">
                            ${formatMarkdown(data.response)}
                        </div>
                    </div>
                `;
                currentLoading.removeAttribute('id'); // Remove id so next loading gets a fresh one
                
                // Check if response is the sleep message (rate limited)
                if (data.response.includes('schlafen komm morgen wieder')) {
                    // Change robot images to sleeping version
                    if (robotImage) {
                        robotImage.src = '/robot-sleeping.png';
                    }
                    
                    // Also update the robot image in the just-posted response message
                    const responseRobotImage = currentLoading.querySelector('img');
                    if (responseRobotImage) {
                        responseRobotImage.src = '/robot-sleeping.png';
                    }
                    
                    // Hide the input form
                    const inputContainer = document.querySelector('.border-t.border-gray-200.bg-gray-50');
                    if (inputContainer) {
                        inputContainer.style.display = 'none';
                    }
                }
            } else if (currentLoading) {
                // Replace loading with error message
                currentLoading.innerHTML = `
                    <img src="/robot.png" alt="Robot Golla" class="w-10 h-10 object-contain rounded-full bg-red-100 p-1 flex-shrink-0">
                    <div class="flex-1 bg-red-50 border border-red-200 rounded-lg p-4 max-w-2xl">
                        <div class="text-red-700">
                            Entschuldigung, es ist ein Fehler aufgetreten. Bitte versuche es spÃ¤ter erneut.
                        </div>
                    </div>
                `;
                currentLoading.removeAttribute('id');
            }
            
            // Scroll to show the response
            if (currentLoading) {
                currentLoading.scrollIntoView({ behavior: 'smooth', block: 'end' });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            
            // Replace loading with network error
            const currentLoading = document.getElementById('current-loading');
            if (currentLoading) {
                currentLoading.innerHTML = `
                    <img src="/robot.png" alt="Robot Golla" class="w-10 h-10 object-contain rounded-full bg-red-100 p-1 flex-shrink-0">
                    <div class="flex-1 bg-red-50 border border-red-200 rounded-lg p-4 max-w-2xl">
                        <div class="text-red-700">
                            Netzwerkfehler: Bitte Ã¼berprÃ¼fe deine Internetverbindung und versuche es erneut.
                        </div>
                    </div>
                `;
                currentLoading.removeAttribute('id');
            }
        });
    }

    chatSubmit.addEventListener('click', sendMessage);
    chatInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });
});
</script>
